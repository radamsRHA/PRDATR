vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 9
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 9
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 10
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 10
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 10
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 10
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 128
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 128
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
list.SimulatedTrees <- list()
class(list.SimulatedTrees) <- "multiPhylo"
tip.number <- 128
for (t in 1:10){
#list.SimulatedTrees[[t]] <- as.phylo.treeshape(x = raldous(tip.number = numeric.n))
#handle.Tree <- as.phylo.treeshape(x = rbiased(tip.number = numeric.n, p = numeric.bias))
handle.Tree <- as.phylo.treeshape(x = raldous(tip.number = tip.number)[[1]])
handle.Tree <- rescale(x = handle.Tree, model = "depth")
handle.Tree <- handle.Tree(depth = 1)
list.SimulatedTrees[[t]] <- handle.Tree
}
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.Model01_BM <- list(handle.Phylogeny = list.SimulatedTrees[[1]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
list.Model02_BM <- list(handle.Phylogeny = list.SimulatedTrees[[2]],
string.Model = "BM",
vector.Z = rep(0, tip.number),
vector.Theta = vector.Theta)
Function_ComputeHellingerDistances(list.Model_01 = list.Model01_BM, list.Model_02 = list.Model02_BM)
handle.DataFrame_Results <- data.frame(list.RESULTS_n3_b1_a1, list.RESULTS_n3_b1_a10, list.RESULTS_n3_b1_a100,vector.SPACE1,
list.RESULTS_n4_b1_a1, list.RESULTS_n4_b1_a10, list.RESULTS_n4_b1_a100,vector.SPACE1,
list.RESULTS_n5_b1_a1, list.RESULTS_n5_b1_a10, list.RESULTS_n5_b1_a100,vector.SPACE1,
list.RESULTS_n6_b1_a1, list.RESULTS_n6_b1_a10, list.RESULTS_n6_b1_a100,vector.SPACE1,
list.RESULTS_n7_b1_a1, list.RESULTS_n7_b1_a10, list.RESULTS_n7_b1_a100,vector.SPACE1,
list.RESULTS_n8_b1_a1, list.RESULTS_n8_b1_a10, list.RESULTS_n8_b1_a100,vector.SPACE1,
list.RESULTS_n9_b1_a1, list.RESULTS_n9_b1_a10, list.RESULTS_n9_b1_a100,vector.SPACE1,
list.RESULTS_n10_b1_a1, list.RESULTS_n10_b1_a10, list.RESULTS_n10_b1_a100)
vioplot(rev(handle.DataFrame_Results), col = rep(c(gray.colors(n = 3, rev = T), "white"), 10), colMed = "black", horizontal = T)
list.RESULTS_n3_b1_a1
list.RESULTS_n3_b1_a10
list.RESULTS_n3_b1_a100
list.RESULTS_n4_b1_a100
list.RESULTS_n4_b1_a10
list.RESULTS_n4_b1_a1
list.RESULTS_n5_b1_a1
list.RESULTS_n5_b1_a10
list.RESULTS_n5_b1_a100
list.RESULTS_n6_b1_a100
list.RESULTS_n3_b1_a1
list.RESULTS_n3_b1_a10
list.RESULTS_n3_b1_a100
#vector.SPACE1 <- rexp(n = length(list.RESULTS_n3_b1_a1), rate = 10^9)
vector.SPACE1 <- sample(x = c(0, 1), size = length(list.RESULTS_n3_b1_a1), replace = T)
handle.DataFrame_Results <- data.frame(vector.SPACE1, vector.SPACE1, vector.SPACE1,vector.SPACE1,
list.RESULTS_n4_b1_a1, list.RESULTS_n4_b1_a10, list.RESULTS_n4_b1_a100,vector.SPACE1,
list.RESULTS_n5_b1_a1, list.RESULTS_n5_b1_a10, list.RESULTS_n5_b1_a100,vector.SPACE1,
list.RESULTS_n6_b1_a1, list.RESULTS_n6_b1_a10, list.RESULTS_n6_b1_a100,vector.SPACE1,
list.RESULTS_n7_b1_a1, list.RESULTS_n7_b1_a10, list.RESULTS_n7_b1_a100,vector.SPACE1,
list.RESULTS_n8_b1_a1, list.RESULTS_n8_b1_a10, list.RESULTS_n8_b1_a100,vector.SPACE1,
list.RESULTS_n9_b1_a1, list.RESULTS_n9_b1_a10, list.RESULTS_n9_b1_a100,vector.SPACE1,
list.RESULTS_n10_b1_a1, list.RESULTS_n10_b1_a10, list.RESULTS_n10_b1_a100)
vioplot(rev(handle.DataFrame_Results), col = rep(c(gray.colors(n = 3, rev = T), "white"), 10), colMed = "black", horizontal = T)
################
# Load depends #
################
#library("devtools")
#library(roxygen2)
###################
# Set working dir #
###################
setwd("~/Copy/_Software/")
setwd("./PRDATR/")
document()
setwd("~/Copy/_Software/")
install("PRDATR")
library("devtools")
library(roxygen2)
###################
# Set working dir #
###################
setwd("~/Copy/_Software/")
setwd("./PRDATR/")
document()
setwd("~/Copy/_Software/")
install("PRDATR")
################
# Load depends #
################
library(ape)
library(geiger)
library(gaussDiff)
library(PRDATR)
library(phytools)
library(vioplot)
library(apTreeshape)
################################
# Simulate datasets with n = 3 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n3_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 3,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n3_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 3,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n3_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 3,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 4 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n4_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 4,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n4_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 4,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n4_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 4,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 5 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n5_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 5,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n5_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 5,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n5_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 5,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 6 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n6_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 6,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n6_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 6,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n6_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 6,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 7 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n7_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 7,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n7_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 7,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n7_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 7,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 8 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n8_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 8,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n8_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 8,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n8_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 8,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 9 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n9_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 9,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n9_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 9,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n9_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 9,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
################################
# Simulate datasets with n = 10 #
################################
vector.Theta <- c(1)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n10_b1_a1 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 10,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(10)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n10_b1_a10 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 10,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
vector.Theta <- c(100)
names(vector.Theta) <- c("Sig2")
list.RESULTS_n10_b1_a100 <- Function_ComputePairwiseDistances_SimulateTips_Aldous(numeric.NumberReps = 100,
numeric.n = 10,
string.Model = "BM",
vector.Theta = vector.Theta)$vector.PairwiseDistances_H
#vector.SPACE1 <- rexp(n = length(list.RESULTS_n3_b1_a1), rate = 10^9)
vector.SPACE1 <- sample(x = c(0, 1), size = length(list.RESULTS_n3_b1_a1), replace = T)
handle.DataFrame_Results <- data.frame(list.RESULTS_n3_b1_a1, list.RESULTS_n3_b1_a10, list.RESULTS_n3_b1_a100,vector.SPACE1,
list.RESULTS_n4_b1_a1, list.RESULTS_n4_b1_a10, list.RESULTS_n4_b1_a100,vector.SPACE1,
list.RESULTS_n5_b1_a1, list.RESULTS_n5_b1_a10, list.RESULTS_n5_b1_a100,vector.SPACE1,
list.RESULTS_n6_b1_a1, list.RESULTS_n6_b1_a10, list.RESULTS_n6_b1_a100,vector.SPACE1,
list.RESULTS_n7_b1_a1, list.RESULTS_n7_b1_a10, list.RESULTS_n7_b1_a100,vector.SPACE1,
list.RESULTS_n8_b1_a1, list.RESULTS_n8_b1_a10, list.RESULTS_n8_b1_a100,vector.SPACE1,
list.RESULTS_n9_b1_a1, list.RESULTS_n9_b1_a10, list.RESULTS_n9_b1_a100,vector.SPACE1,
list.RESULTS_n10_b1_a1, list.RESULTS_n10_b1_a10, list.RESULTS_n10_b1_a100)
vioplot(rev(handle.DataFrame_Results), col = rep(c(gray.colors(n = 3, rev = T), "white"), 10), colMed = "black", horizontal = T)
list.RESULTS_n4_b1_a1
list.RESULTS_n4_b1_a10
list.RESULTS_n4_b1_a100
list.RESULTS_n5_b1_a100
list.RESULTS_n4_b1_a1
list.RESULTS_n4_b1_a10
list.RESULTS_n4_b1_a100
list.RESULTS_n5_b1_a100
list.RESULTS_n5_b1_a10
list.RESULTS_n5_b1_a1
list.RESULTS_n6_b1_a1
list.RESULTS_n6_b1_a10
list.RESULTS_n6_b1_a100
list.RESULTS_n7_b1_a100
list.RESULTS_n7_b1_a10
list.RESULTS_n7_b1_a1
list.RESULTS_n8_b1_a1
list.RESULTS_n8_b1_a10
list.RESULTS_n8_b1_a100
list.RESULTS_n9_b1_a100
list.RESULTS_n9_b1_a10
list.RESULTS_n9_b1_a1
list.RESULTS_n10_b1_a1
list.RESULTS_n10_b1_a10
list.RESULTS_n10_b1_a100
handle.DataFrame_Results <- data.frame(list.RESULTS_n3_b1_a1, list.RESULTS_n3_b1_a10, list.RESULTS_n3_b1_a100,vector.SPACE1,
list.RESULTS_n4_b1_a1, list.RESULTS_n4_b1_a10, list.RESULTS_n4_b1_a100,vector.SPACE1,
list.RESULTS_n5_b1_a1, list.RESULTS_n5_b1_a10, list.RESULTS_n5_b1_a100,vector.SPACE1,
list.RESULTS_n6_b1_a1, list.RESULTS_n6_b1_a10, list.RESULTS_n6_b1_a100,vector.SPACE1,
list.RESULTS_n7_b1_a1, list.RESULTS_n7_b1_a10, list.RESULTS_n7_b1_a100,vector.SPACE1,
list.RESULTS_n8_b1_a1, list.RESULTS_n8_b1_a10, list.RESULTS_n8_b1_a100,vector.SPACE1,
list.RESULTS_n9_b1_a1, list.RESULTS_n9_b1_a10, list.RESULTS_n9_b1_a100,vector.SPACE1,
list.RESULTS_n10_b1_a1, list.RESULTS_n10_b1_a10, list.RESULTS_n10_b1_a100)
vioplot(rev(handle.DataFrame_Results), col = rep(c(gray.colors(n = 3, rev = T), "white"), 10), colMed = "black", horizontal = T)
handle.DataFrame_Results
handle.DataFrame_Results[handle.DataFrame_Results<0] <- 0
vioplot(rev(handle.DataFrame_Results), col = rep(c(gray.colors(n = 3, rev = T), "white"), 10), colMed = "black", horizontal = T)
handle.DataFrame_Results
list.RESULTS_n3_b1_a1
list.RESULTS_n3_b1_a10
list.RESULTS_n3_b1_a100
handle.DataFrame_Results <- data.frame(vector.SPACE1, vector.SPACE1, vector.SPACE1,vector.SPACE1,
list.RESULTS_n4_b1_a1, list.RESULTS_n4_b1_a10, list.RESULTS_n4_b1_a100,vector.SPACE1,
list.RESULTS_n5_b1_a1, list.RESULTS_n5_b1_a10, list.RESULTS_n5_b1_a100,vector.SPACE1,
list.RESULTS_n6_b1_a1, list.RESULTS_n6_b1_a10, list.RESULTS_n6_b1_a100,vector.SPACE1,
list.RESULTS_n7_b1_a1, list.RESULTS_n7_b1_a10, list.RESULTS_n7_b1_a100,vector.SPACE1,
list.RESULTS_n8_b1_a1, list.RESULTS_n8_b1_a10, list.RESULTS_n8_b1_a100,vector.SPACE1,
list.RESULTS_n9_b1_a1, list.RESULTS_n9_b1_a10, list.RESULTS_n9_b1_a100,vector.SPACE1,
list.RESULTS_n10_b1_a1, list.RESULTS_n10_b1_a10, list.RESULTS_n10_b1_a100)
handle.DataFrame_Results[handle.DataFrame_Results<0] <- 0
vioplot(rev(handle.DataFrame_Results), col = rep(c(gray.colors(n = 3, rev = T), "white"), 10), colMed = "black", horizontal = T)
library("devtools")
library(roxygen2)
setwd("~/Copy/_Software/")
setwd("./PRDATR/")
document()
setwd("~/Copy/_Software/")
install("PRDATR")
